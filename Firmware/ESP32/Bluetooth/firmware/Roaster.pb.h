/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6 */

#ifndef PB_ROASTER_PB_H_INCLUDED
#define PB_ROASTER_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* Actuator request is intended for querying/controlling a specific actuator on the roaster.
 The actuator setting is optional. Setting this field  controls the actuator - otherwise, the actuators state is queried.
 Message flow: Monitor/controller sends the message to the roaster. */
typedef struct _ActuatorRequest { 
    char actuator_id[16];
    bool has_actuator_setting;
    float actuator_setting;
} ActuatorRequest;

/* Actuator response is intended for responding an actuator request.
 Message flow: Roaster sends the message to the monitor/controller. */
typedef struct _ActuatorResponse { 
    char actuator_id[16];
    float actuator_setting;
} ActuatorResponse;

/* Sensor request is intended for querying a specific sensor's value on the roaster.
 Message flow: Monitor/controller sends the message to the roaster. */
typedef struct _SensorRequest { 
    char sensor_id[16];
} SensorRequest;

/* Sensor response is intended for responding a sensor request.
 Message flow: Roaster sends the message to the monitor/controller. */
typedef struct _SensorResponse { 
    char sensor_id[16];
    float sensor_value;
} SensorResponse;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define SensorRequest_init_default               {""}
#define SensorResponse_init_default              {"", 0}
#define ActuatorRequest_init_default             {"", false, 0}
#define ActuatorResponse_init_default            {"", 0}
#define SensorRequest_init_zero                  {""}
#define SensorResponse_init_zero                 {"", 0}
#define ActuatorRequest_init_zero                {"", false, 0}
#define ActuatorResponse_init_zero               {"", 0}

/* Field tags (for use in manual encoding/decoding) */
#define ActuatorRequest_actuator_id_tag          1
#define ActuatorRequest_actuator_setting_tag     2
#define ActuatorResponse_actuator_id_tag         1
#define ActuatorResponse_actuator_setting_tag    2
#define SensorRequest_sensor_id_tag              1
#define SensorResponse_sensor_id_tag             1
#define SensorResponse_sensor_value_tag          2

/* Struct field encoding specification for nanopb */
#define SensorRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   sensor_id,         1)
#define SensorRequest_CALLBACK NULL
#define SensorRequest_DEFAULT NULL

#define SensorResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   sensor_id,         1) \
X(a, STATIC,   SINGULAR, FLOAT,    sensor_value,      2)
#define SensorResponse_CALLBACK NULL
#define SensorResponse_DEFAULT NULL

#define ActuatorRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   actuator_id,       1) \
X(a, STATIC,   OPTIONAL, FLOAT,    actuator_setting,   2)
#define ActuatorRequest_CALLBACK NULL
#define ActuatorRequest_DEFAULT NULL

#define ActuatorResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   actuator_id,       1) \
X(a, STATIC,   SINGULAR, FLOAT,    actuator_setting,   2)
#define ActuatorResponse_CALLBACK NULL
#define ActuatorResponse_DEFAULT NULL

extern const pb_msgdesc_t SensorRequest_msg;
extern const pb_msgdesc_t SensorResponse_msg;
extern const pb_msgdesc_t ActuatorRequest_msg;
extern const pb_msgdesc_t ActuatorResponse_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define SensorRequest_fields &SensorRequest_msg
#define SensorResponse_fields &SensorResponse_msg
#define ActuatorRequest_fields &ActuatorRequest_msg
#define ActuatorResponse_fields &ActuatorResponse_msg

/* Maximum encoded size of messages (where known) */
#define ActuatorRequest_size                     22
#define ActuatorResponse_size                    22
#define SensorRequest_size                       17
#define SensorResponse_size                      22

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
